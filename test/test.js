/* eslint-env mocha */

'use strict'

const empty = require('./fixtures/empty.json')
const people = require('./fixtures/people.json')
const peoplePlusManagerColumn = require('./fixtures/people-plus-manager-column.json')
const planets = require('./fixtures/planets.json')

const pgDiffSync = require('./../lib')
const expect = require('chai').expect

describe('Run some basic tests', function () {
  it('should build everything for a simple table in a blank database', function () {
    const statements = pgDiffSync(empty, people)
    expect(statements).to.eql(
      [
        'CREATE SCHEMA pg_diff_sync_test;',
        "COMMENT ON SCHEMA pg_diff_sync_test IS 'Schema auto-generated by Relationize.js!';",
        'CREATE TABLE pg_diff_sync_test.people();',
        "COMMENT ON TABLE pg_diff_sync_test.people IS 'Just a simple list of people!';",
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN employee_no text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN first_name text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN last_name text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN age integer;',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN _created timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN _created_by text;',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN _modified timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN _modified_by text;',
        "COMMENT ON COLUMN pg_diff_sync_test.people.first_name IS 'Person''s first name';",
        "COMMENT ON COLUMN pg_diff_sync_test.people.age IS 'Age in years';",
        "COMMENT ON COLUMN pg_diff_sync_test.people._created IS 'Timestamp for when this record was created';",
        "COMMENT ON COLUMN pg_diff_sync_test.people._created_by IS 'UserID that created this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.people._modified IS 'Timestamp for when this record was last updated';",
        "COMMENT ON COLUMN pg_diff_sync_test.people._modified_by IS 'UserID that last modified this record (if known)';",
        'ALTER TABLE pg_diff_sync_test.people ADD PRIMARY KEY (employee_no);',
        'CREATE UNIQUE INDEX people_first_name_last_name_idx ON pg_diff_sync_test.people USING btree (first_name,last_name);'
      ]
    )
  }
  )

  it('should build nothing when both structures are the same', function () {
    const statements = pgDiffSync(people, people)
    expect(statements).to.eql(
      []
    )
  }
  )

  it('should build add a new manager_no column', function () {
    const statements = pgDiffSync(people, peoplePlusManagerColumn)
    expect(statements).to.eql(
      [
        'ALTER TABLE pg_diff_sync_test.people ADD COLUMN manager_no text;',
        "COMMENT ON COLUMN pg_diff_sync_test.people.manager_no IS 'The employee_no of this person''''s manager - if there is one';"
      ]
    )
  }
  )

  it('should build nested tables', function () {
    const statements = pgDiffSync(empty, planets)
    expect(statements).to.eql(
      [
        'CREATE SCHEMA pg_diff_sync_test;',
        "COMMENT ON SCHEMA pg_diff_sync_test IS 'Schema auto-generated by Relationize.js!';",
        'CREATE TABLE pg_diff_sync_test.person();',
        'CREATE TABLE pg_diff_sync_test.craters();',
        'CREATE TABLE pg_diff_sync_test.planets();',
        'CREATE TABLE pg_diff_sync_test.moons();',
        "COMMENT ON TABLE pg_diff_sync_test.person IS 'Isn''t this just a list of people?';",
        "COMMENT ON TABLE pg_diff_sync_test.craters IS 'Auto-generated via Relationize.js!';",
        "COMMENT ON TABLE pg_diff_sync_test.planets IS 'A list of planets';",
        "COMMENT ON TABLE pg_diff_sync_test.moons IS 'Auto-generated via Relationize.js!';",
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN employee_no text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN first_name text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN last_name text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN age integer;',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN _created timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN _created_by text;',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN _modified timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.person ADD COLUMN _modified_by text;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN title text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN diameter integer;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN moons_id uuid;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN id uuid NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN _created timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN _created_by text;',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN _modified timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.craters ADD COLUMN _modified_by text;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN name text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN title text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN type text;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN diameter numeric;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN color numeric;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN url text;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN other_facts jsonb;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN tags text[];',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN _created timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN _created_by text;',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN _modified timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.planets ADD COLUMN _modified_by text;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN title text NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN discovered_by text;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN discovery_year integer;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN planets_name text;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN id uuid NOT NULL;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN _created timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN _created_by text;',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN _modified timestamp with time zone NOT NULL DEFAULT now();',
        'ALTER TABLE pg_diff_sync_test.moons ADD COLUMN _modified_by text;',
        "COMMENT ON COLUMN pg_diff_sync_test.person.first_name IS 'Person''s first name';",
        "COMMENT ON COLUMN pg_diff_sync_test.person.age IS 'Age in years';",
        "COMMENT ON COLUMN pg_diff_sync_test.person._created IS 'Timestamp for when this record was created';",
        "COMMENT ON COLUMN pg_diff_sync_test.person._created_by IS 'UserID that created this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.person._modified IS 'Timestamp for when this record was last updated';",
        "COMMENT ON COLUMN pg_diff_sync_test.person._modified_by IS 'UserID that last modified this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters.title IS 'The display-label of the crater';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters.diameter IS 'Diameter of the crater, in metres';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters.moons_id IS 'Auto-added foreign key for moons';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters.id IS 'Automatically added UUID-based primary key column';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters._created IS 'Timestamp for when this record was created';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters._created_by IS 'UserID that created this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters._modified IS 'Timestamp for when this record was last updated';",
        "COMMENT ON COLUMN pg_diff_sync_test.craters._modified_by IS 'UserID that last modified this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.name IS 'Unique planet name';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.title IS 'The display-label of the planet';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.type IS 'What type of planet is this?';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.diameter IS 'The diameter of the planet, in metres';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.color IS 'What color is this planet?';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.url IS 'Further reading available here!';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets.other_facts IS 'Any other info relevant to this planet';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets._created IS 'Timestamp for when this record was created';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets._created_by IS 'UserID that created this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets._modified IS 'Timestamp for when this record was last updated';",
        "COMMENT ON COLUMN pg_diff_sync_test.planets._modified_by IS 'UserID that last modified this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons.title IS 'The display-label of the moon';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons.discovered_by IS 'Name of the person who discovered the moon';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons.discovery_year IS 'Year the moon was discovered (e.g. 1804)';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons.planets_name IS 'Auto-added foreign key for planets';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons.id IS 'Automatically added UUID-based primary key column';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons._created IS 'Timestamp for when this record was created';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons._created_by IS 'UserID that created this record (if known)';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons._modified IS 'Timestamp for when this record was last updated';",
        "COMMENT ON COLUMN pg_diff_sync_test.moons._modified_by IS 'UserID that last modified this record (if known)';",
        'ALTER TABLE pg_diff_sync_test.person ADD PRIMARY KEY (employee_no);',
        'ALTER TABLE pg_diff_sync_test.craters ADD PRIMARY KEY (id);',
        'ALTER TABLE pg_diff_sync_test.planets ADD PRIMARY KEY (name);',
        'ALTER TABLE pg_diff_sync_test.moons ADD PRIMARY KEY (id);',
        'CREATE INDEX person_first_name_last_name_idx ON pg_diff_sync_test.person USING btree (first_name,last_name);',
        'CREATE INDEX craters_moons_id_idx ON pg_diff_sync_test.craters USING btree (moons_id);',
        'CREATE INDEX moons_planets_name_idx ON pg_diff_sync_test.moons USING btree (planets_name);',
        'ALTER TABLE pg_diff_sync_test.craters ADD CONSTRAINT craters_to_moons_fk FOREIGN KEY (moons_id) REFERENCES pg_diff_sync_test.moons (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;',
        'ALTER TABLE pg_diff_sync_test.moons ADD CONSTRAINT moons_to_planets_fk FOREIGN KEY (planets_name) REFERENCES pg_diff_sync_test.planets (name) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;'
      ]
    )
  }
  )
})
